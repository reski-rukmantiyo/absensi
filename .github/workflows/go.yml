name: Go

on:
  pull_request:
    branches: [ master ]

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
  
    - name: get commit message
      id: get_commit_message
      run: |
        echo ::set-output name=COMMIT_MESSAGE::$(git log --pretty=oneline HEAD...${{ github.ref }})

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Build Linux
      run: GOOS=linux GOARCH=amd64 go build -o release-linux.amd64 -v source/cmd/main.go

    - name: Build Windows 
      run: GOOS=windows GOARCH=amd64 go build -o release-windows-amd64.exe -v source/cmd/main.go

    - name: Build MacOS 64bit
      run: GOOS=darwin GOARCH=amd64 go build -o release-mac-amd64 -v source/cmd/main.go
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          This is release for ${{ steps.get_version.outputs.VERSION }}
          Log Message:
          ${{ steps.get_commit_message.outputs.COMMIT_MESSAGE }}
        draft: false
        prerelease: false
        
    - name: Upload Release Linux Asset
      id: upload-release-asset-linux
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./release-linux.amd64
        asset_name: linux-amd64
        asset_content_type: application/octet-stream
        
    - name: Upload Release Mac Asset
      id: upload-release-asset-mac
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./release-mac-amd64 
        asset_name: mac-amd64
        
    - name: Upload Release Windows Asset
      id: upload-release-asset-windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./release-windows-amd64.exe
        asset_name: windows-amd64.exe
        asset_content_type: application/octet-stream
